//changes made: file handling (loadDictionary Method)

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.stream.Collectors;

public class SpellingBeeGame {

    static final int MISTAKES_ALLOWED = 5; // Maximum mistakes allowed
    static final int[] POINTS = {
        1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 1, 2, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10
    }; // Scrabble points for letters: a=1, b=3, etc.

    static final String DICTIONARY_FILE = "dictionary.txt"; // Path to dictionary file
    static Set<String> dictionary = new HashSet<>();

    public static void main(String[] args) {
        try {
            loadDictionary(); // Load dictionary at the start
            playGame();
        } catch (Exception e) {
            System.out.println("An error occurred: " + e.getMessage());
        }
    }

    // Main game logic
    static void playGame() throws IOException {
        Scanner scanner = new Scanner(System.in);

        // Generate random letters and a compulsory letter
        String letterSet = generateRandomLetters();
        char mustInclude = generateMustIncludeLetter(letterSet);

        System.out.println("Welcome to the Spelling Bee Game!");
        System.out.println("Generated letters: " + letterSet);
        System.out.println("You must include the letter: " + mustInclude);
        System.out.println("Form words using these letters. Words must be at least 4 letters long.");
        System.out.println("You have " + MISTAKES_ALLOWED + " mistakes allowed. Good luck!");

        int mistakes = 0;
        int totalPoints = 0; // Track total points
        Set<String> usedWords = new HashSet<>(); // Track previously used words

        while (mistakes < MISTAKES_ALLOWED) {
            System.out.print("\nEnter a word: ");
            String userWord = scanner.nextLine().toLowerCase();

            if (userWord.length() < 4) {
                System.out.println("Word must be at least 4 letters long.");
                mistakes++;
            } else if (!userWord.contains(String.valueOf(mustInclude))) {
                System.out.println("Word must include the letter '" + mustInclude + "'.");
                mistakes++;
            } else if (!areLettersValid(userWord, letterSet)) {
                System.out.println("Word contains invalid letters.");
                mistakes++;
            } else if (!dictionary.contains(userWord)) {
                System.out.println("Word is not in the dictionary.");
                mistakes++;
            } else if (isWordUsed(userWord, usedWords)) { // Use the new method here
                System.out.println("Word has already been used.");
            } else {
                int score = calculatePoints(userWord);
                usedWords.add(userWord);
                totalPoints += score;
                System.out.println("Word accepted! Points: " + score);
            }

            System.out.println("Mistakes remaining: " + (MISTAKES_ALLOWED - mistakes));
        }

        System.out.println("\nGame over! You used " + usedWords.size() + " valid words.");
        System.out.println("Total points: " + totalPoints);
    }

    // Load the dictionary into a set for faster lookup
    static void loadDictionary() throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(DICTIONARY_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                dictionary.add(line.toLowerCase());
            }
        } 
    }

    // Generate a random string of 6 letters
    static String generateRandomLetters() {
        Random random = new Random();
        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        return random.ints(6, 0, alphabet.length())
                     .mapToObj(alphabet::charAt)
                     .map(String::valueOf)
                     .collect(Collectors.joining());
    }

    // Generate a compulsory letter, ensuring it is part of the generated letter set
    static char generateMustIncludeLetter(String letterSet) {
        Random random = new Random();
        return letterSet.charAt(random.nextInt(letterSet.length()));
    }

    // Check if the word contains only valid letters from the provided set
    static boolean areLettersValid(String word, String letterSet) {
        for (char ch : word.toCharArray()) {
            if (letterSet.indexOf(ch) == -1) {
                return false;
            }
        }
        return true;
    }

    // Check if the word has already been used
    static boolean isWordUsed(String word, Set<String> usedWords) {
        return usedWords.contains(word);
    }

    // Calculate the Scrabble points for a word
    static int calculatePoints(String word) {
        return word.chars()
                   .map(c -> POINTS[c - 'a'])
                   .sum();
    }
}
