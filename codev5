import javax.swing.*;  
import java.awt.*; 
import java.awt.event.ActionEvent;  
import java.io.*; 
import java.util.*;  
import java.util.stream.Collectors;  

public class SpellingBeeGameGUI extends JFrame {

    static final int MISTAKES_ALLOWED = 5;
    static final int[] POINTS = {1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 1, 2, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10};
    static final String DICTIONARY_FILE = "C:\\Users\\Public\\Downloads\\dictionary.txt";
    static Set<String> dictionary = new HashSet<>();   

    String letterSet;
    char mustInclude;
    StringBuilder currentWord = new StringBuilder();  
    int mistakes = 0;
    int totalPoints = 0;
    Set<String> usedWords = new HashSet<>();  

    JLabel wordLabel;
    JLabel scoreLabel;
    JLabel mistakesLabel;
    JTextArea usedWordsArea;

    public SpellingBeeGameGUI() {  
        displayInstructions();
        loadDictionary();
        setupGame();
        setupGUI();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(SpellingBeeGameGUI::new);  
    }

    void displayInstructions() {
        String instructions = """
                How It Works:
                1. The game generates 7 random letters, with one letter being compulsory.
                2. You can form words from the given letters, but each word must include the compulsory letter.
                3. Words are checked against a dictionary, and points are awarded based on the Scrabble point system.
                4. A mistake occurs if you submit a word that:
                   - Doesnâ€™t include the compulsory letter.
                   - Has already been entered before.
                   - Is less than 4 letters long.
                   - Is not found in the dictionary.
                """;
        JOptionPane.showMessageDialog(this, instructions, "Game Instructions", JOptionPane.INFORMATION_MESSAGE);  
    }

    void loadDictionary() {
        try (BufferedReader reader = new BufferedReader(new FileReader(DICTIONARY_FILE))) {  
            String line;
            while ((line = reader.readLine()) != null) {  
                dictionary.add(line.trim().toLowerCase()); 
            }
        } catch (IOException e) {  
            JOptionPane.showMessageDialog(this, "Error loading dictionary: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);  
        }
    }

    void setupGame() {
        Set<Character> uniqueLetters = generateUniqueRandomLetters();
        ArrayList<Character> lettersList = new ArrayList<>(uniqueLetters); 
        Random random = new Random();
        mustInclude = lettersList.get(random.nextInt(lettersList.size())); 
        lettersList.remove(Character.valueOf(mustInclude)); 
        letterSet = lettersList.stream()  
                .map(String::valueOf)     
                .collect(Collectors.joining()); 
    }

    void setupGUI() {
        setTitle("Spelling Bee Game");
        setSize(400, 600);
        setLayout(new BorderLayout());
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        getContentPane().setBackground(Color.BLACK);  

        JPanel lettersPanel = new JPanel();
        lettersPanel.setLayout(null);
        lettersPanel.setPreferredSize(new Dimension(300, 300));
        lettersPanel.setBackground(Color.BLACK);
        add(lettersPanel, BorderLayout.CENTER);

        wordLabel = new JLabel("Current Word: ");
        scoreLabel = new JLabel("Score: 0");
        mistakesLabel = new JLabel("Mistakes Remaining: " + (MISTAKES_ALLOWED - mistakes));

        wordLabel.setForeground(Color.WHITE);
        scoreLabel.setForeground(Color.WHITE);
        mistakesLabel.setForeground(Color.WHITE);

        JPanel infoPanel = new JPanel();
        infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
        infoPanel.add(wordLabel);
        infoPanel.add(scoreLabel);
        infoPanel.add(mistakesLabel);
        infoPanel.setBackground(Color.BLACK);
        add(infoPanel, BorderLayout.NORTH);

        int radius = 100;
        int centerX = 150;
        int centerY = 150;

        for (int i = 0; i < letterSet.length(); i++) {
            char letter = Character.toUpperCase(letterSet.charAt(i));
            JButton button = createLetterButton(letter, Color.WHITE);

            double angle = 2 * Math.PI * i / letterSet.length();  
            int x = (int) (centerX + radius * Math.cos(angle));  
            int y = (int) (centerY + radius * Math.sin(angle));

            button.setBounds(x, y, 50, 50);
            lettersPanel.add(button);
        }

        JButton mustIncludeButton = createLetterButton(Character.toUpperCase(mustInclude), Color.YELLOW);
        mustIncludeButton.setBounds(centerX - 0, centerY - 0, 50, 50); 
        lettersPanel.add(mustIncludeButton);

        JPanel bottomPanel = new JPanel();
        bottomPanel.setBackground(Color.BLACK);

        JButton submitButton = new JButton("Submit Word");
        submitButton.addActionListener(e -> submitWord());

        JButton deleteButton = new JButton("Delete Last Letter");
        deleteButton.addActionListener(e -> deleteLastLetter());

        bottomPanel.add(deleteButton);
        bottomPanel.add(submitButton);

        add(bottomPanel, BorderLayout.SOUTH);

        usedWordsArea = new JTextArea(5, 20);
        usedWordsArea.setEditable(false);
        usedWordsArea.setBackground(Color.BLACK);
        usedWordsArea.setForeground(Color.WHITE);
        usedWordsArea.setText("Used Words:\n");

        JScrollPane scrollPane = new JScrollPane(usedWordsArea);
        scrollPane.setPreferredSize(new Dimension(300, 100));
        add(scrollPane, BorderLayout.EAST);

        setVisible(true);
    }

    JButton createLetterButton(char letter, Color color) {
        JButton button = new JButton(String.valueOf(letter));
        button.setBackground(color);
        button.addActionListener(e -> addLetterToWord(letter));
        return button;
    }

    void addLetterToWord(char letter) {
        currentWord.append(letter);
        updateWordLabel();
    }

    void updateWordLabel() {
        wordLabel.setText("Current Word: " + currentWord.toString());
    }

    void deleteLastLetter() {
        if (currentWord.length() > 0) {
            currentWord.deleteCharAt(currentWord.length() - 1);
            updateWordLabel();
        }
    }

    void submitWord() {
        String word = currentWord.toString().toLowerCase();

        if (isWordInvalid(word)) {  
            mistakes++;  
        } else {
            int points = calculatePoints(word);
            totalPoints += points;
            usedWords.add(word);
            JOptionPane.showMessageDialog(this, "Word accepted! You earned " + points + " points.");
            updateUsedWords(word);
        }

        scoreLabel.setText("Score: " + totalPoints);
        mistakesLabel.setText("Mistakes Remaining: " + (MISTAKES_ALLOWED - mistakes));

        if (mistakes >= MISTAKES_ALLOWED) {
            JOptionPane.showMessageDialog(this, "Game Over! Your final score is: " + totalPoints);
            System.exit(0);
        }

        currentWord.setLength(0);
        updateWordLabel();
    }

    boolean isWordInvalid(String word) {
        if (usedWords.contains(word)) {
            showError("You have already used that word.");
            return true;
        }

        if (word.length() < 4) {
            showError("Word must be at least 4 letters long.");
            return true;
        } else if (!word.contains(String.valueOf(mustInclude))) {
            showError("Word must include the letter " + mustInclude + ".");
            return true;
        } else if (!isValidWord(word)) {
            showError("Word is not in the dictionary.");
            return true;
        }
        return false;
    }

    void endGame() {
        JOptionPane.showMessageDialog(this, "Game Over! Your final score is: " + totalPoints);
        System.exit(0);
    }

    void updateUsedWords(String word) {
        usedWordsArea.append(word.toUpperCase() + "\n"); 
    }

    boolean isValidWord(String word) {
        return dictionary.contains(word);
    }

    int calculatePoints(String word) {
        return word.chars().map(ch -> {
            if (ch >= 'a' && ch <= 'z') {
                return POINTS[ch - 'a'];
            }
            return 0;
        }).sum();
    }

    Set<Character> generateUniqueRandomLetters() {
        Random random = new Random();
        Set<Character> letters = new HashSet<>();
        Set<Character> vowels = Set.of('a', 'e', 'i', 'o', 'u');
        int vowelCount = 0;

        while (vowelCount < 2) {
            char letter = (char) ('a' + random.nextInt(26));
            if (vowels.contains(letter) && !letters.contains(letter)) {
                letters.add(letter);
                vowelCount++;
            }
        }

        while (letters.size() < 7) {
            char letter = (char) ('a' + random.nextInt(26));
            letters.add(letter);
        }

        return letters;
    }

    void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
}
