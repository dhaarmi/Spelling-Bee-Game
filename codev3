import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.stream.Collectors;

class SpellingBeeGame {
    public static void main(String[] args) {
        try {
            Dictionary dictionary = new Dictionary("dictionary.txt");  // Load dictionary
            Game game = new Game(dictionary);  // Start the game
            game.play();
        } catch (Exception e) {
            System.out.println("An error occurred: " + e.getMessage());
        }
    }
}

class Game {
    static final int MISTAKES_ALLOWED = 5;
    static final int[] POINTS = { 1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 1, 2, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10 };
    String letterSet;
    char mustInclude;
    int mistakes;
    int totalPoints;
    Set<String> usedWords;
    Player player;
    Dictionary dictionary;

    Game(Dictionary dictionary) {
        this.dictionary = dictionary;
        this.player = new Player();
        this.usedWords = new HashSet<>();
    }

    void play() throws IOException {
        Scanner scanner = new Scanner(System.in);
        generateRandomLetters();
        mustInclude = generateMustIncludeLetter();

        System.out.println("Welcome to the Spelling Bee Game!");
        System.out.println("Generated letters: " + letterSet);
        System.out.println("You must include the letter: " + mustInclude);
        System.out.println("Form words using these letters. Words must be at least 4 letters long.");
        System.out.println("You have " + MISTAKES_ALLOWED + " mistakes allowed. Good luck!");

        while (mistakes < MISTAKES_ALLOWED) {
            System.out.print("\nEnter a word: ");
            String userWord = scanner.nextLine().toLowerCase();

            Word word = new Word(userWord);

            if (!word.isValidLength()) {
                System.out.println("Word must be at least 4 letters long.");
                mistakes++;
            } else if (!word.containsMustIncludeLetter(mustInclude)) {
                System.out.println("Word must include the letter '" + mustInclude + "'.");
                mistakes++;
            } else if (!word.areLettersValid(letterSet)) {
                System.out.println("Word contains invalid letters.");
                mistakes++;
            } else if (!dictionary.containsWord(userWord)) {
                System.out.println("Word is not in the dictionary.");
                mistakes++;
            } else if (usedWords.contains(userWord)) {
                System.out.println("Word has already been used.");
            } else {
                int score = word.calculatePoints(POINTS);
                usedWords.add(userWord);
                totalPoints += score;
                player.addScore(score);
                System.out.println("Word accepted! Points: " + score);
            }

            System.out.println("Mistakes remaining: " + (MISTAKES_ALLOWED - mistakes));
        }

        System.out.println("\nGame over! You used " + usedWords.size() + " valid words.");
        System.out.println("Total points: " + player.getScore());
    }

    void generateRandomLetters() {
        Random random = new Random();
        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        letterSet = random.ints(6, 0, alphabet.length())
                          .mapToObj(alphabet::charAt)
                          .map(String::valueOf)
                          .collect(Collectors.joining());
    }

    char generateMustIncludeLetter() {
        Random random = new Random();
        return letterSet.charAt(random.nextInt(letterSet.length()));
    }
}

class Word {
    String word;

    Word(String word) {
        this.word = word;
    }

    boolean isValidLength() {
        return word.length() >= 4;
    }

    boolean containsMustIncludeLetter(char mustInclude) {
        return word.indexOf(mustInclude) != -1;
    }

    boolean areLettersValid(String letterSet) {
        for (char ch : word.toCharArray()) {
            if (letterSet.indexOf(ch) == -1) {
                return false;
            }
        }
        return true;
    }

    int calculatePoints(int[] points) {
        return word.chars()
                   .map(c -> points[c - 'a'])
                   .sum();
    }
}

class Player {
    int score;

    Player() {
        this.score = 0;
    }

    void addScore(int points) {
        this.score += points;
    }

    int getScore() {
        return this.score;
    }
}

class Dictionary {
    Set<String> words;

    Dictionary(String filePath) throws IOException {
        loadDictionary(filePath);
    }

    void loadDictionary(String filePath) throws IOException {
        Path path = Paths.get(filePath);
        words = Files.lines(path)
                     .map(String::toLowerCase)
                     .collect(Collectors.toSet());
    }

    boolean containsWord(String word) {
        return words.contains(word);
    }
}
